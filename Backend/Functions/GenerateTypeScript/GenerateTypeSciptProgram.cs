using System.Reflection;
using System.Text;
using AppDTOs;
using AppDTOs.Designer;
using AppDTOs.Enumerations;
using Enumerations;
using Fields;
using Identities;
using ITI.DDD.Domain;
using ITI.TypeScriptDtoGenerator;
using WebDTOs;

namespace GenerateTypeScript;

// Automatically runs on build
internal static class GenerateTypeSciptProgram
{
    private static readonly string ModelsGeneratedPath = PathUtil.GetModelsGeneratedPath();

    private static readonly string AutoGeneratedMessage = "// Auto-generated by GenerateTypeScript";

    private static void WriteFile(string path, StringBuilder stringBuilder)
    {
        stringBuilder.Replace("\r", "");
        File.WriteAllText(path, stringBuilder.ToString());
        Console.WriteLine($"Generated {Path.GetFileName(path)}.");
    }

    private static void GenerateModels()
    {
        var outputPath = ModelsGeneratedPath;

        var enums = new List<Type>
        {
            typeof(ActiveFilter),
            typeof(DesignerDataType),
            typeof(ImportStatus),
            typeof(UserRole),
            typeof(ErrorDtoType),
            typeof(MeasurementType),
            typeof(ReportStatus),
            typeof(ReportType)
        };

        var dtos = new List<Type>
        {
            typeof(CategoryDto),
            typeof(CategoryId),
            typeof(CategoryInputDto),
            typeof(CompanyContactInfoDto),
            typeof(ComponentId),
            typeof(ComponentDto),
            typeof(ComponentTypeDto),
            typeof(ComponentTypeId),
            typeof(ComponentSummaryDto),
            typeof(ComponentVersionDto),
            typeof(ComponentVersionId),
            typeof(DesignerDataDto),
            typeof(EmailAddressDto),
            typeof(ErrorDto),
            typeof(FileId),
            typeof(FileRefDto),
            typeof(Identity),
            typeof(ImportDto),
            typeof(ImportId),
            typeof(LogoSetDto),
            typeof(LogoSetId),
            typeof(NoteBlockDto),
            typeof(NoteDto),
            typeof(OrganizationDto),
            typeof(OrganizationId),
            typeof(OrganizationReferenceDto),
            typeof(OrganizationSummaryDto),
            typeof(PageId),
            typeof(PageOptionsDto),
            typeof(PageSummaryDto),
            typeof(PartialAddressDto),
            typeof(PermissionDto),
            typeof(PermissionRequestDto),
            typeof(PersonNameDto),
            typeof(PhoneNumberDto),
            typeof(PlacedProductKitDto),
            typeof(ProductFamilyDto),
            typeof(ProductFamilyId),
            typeof(ProductFamilyReferenceDto),
            typeof(ProductKitComponentMapDto),
            typeof(ProductKitComponentMapId),
            typeof(ProductKitComponentMapInputDto),
            typeof(ProductKitDto),
            typeof(ProductKitId),
            typeof(ProductKitDesignerDto),
            typeof(ProductKitSummaryDto),
            typeof(ProductKitVersionDto),
            typeof(ProductKitVersionId),
            typeof(ProductKitReferenceDto),
            typeof(ProductKitReferenceId),
            typeof(ProductKitReferenceSummaryDto),
            typeof(ProductKitVersionSummaryDto),
            typeof(ProductPhotoDto),
            typeof(ProductPhotoId),
            typeof(ProductPhotoSummaryDto),
            typeof(ProductRequirementDto),
            typeof(ProductRequirementId),
            typeof(ProjectBudgetOptionsDto),
            typeof(ProjectDto),
            typeof(ProjectId),
            typeof(ProjectPublicationId),
            typeof(ProjectPublicationSummaryDto),
            typeof(ProjectSummaryDto),
            typeof(ProjectReportOptionsDto),
            typeof(ReportDto),
            typeof(ReportId),
            typeof(SheetTypeId),
            typeof(SheetTypeSummaryDto),
            typeof(SymbolDto),
            typeof(SymbolId),
            typeof(SymbolSummaryDto),
            typeof(TermsDocumentDto),
            typeof(TermsDocumentId),
            typeof(TermsDocumentSummaryDto),
            typeof(TreeDto),
            typeof(TreeInputDto),
            typeof(UserId),
            typeof(UserDto),
            typeof(UserLogInDto),
            typeof(UserReferenceDto),
            typeof(UserSummaryDto)
        };

        foreach (var @enum in enums)
        {
            TypeScriptDtoGenerator.GenerateEnum(@enum, outputPath);
        }

        Console.WriteLine("Generated TypeScript enums.");

        TypeScriptDtoGenerator.GenerateDtos(dtos, enums, "", outputPath);
        Console.WriteLine("Generated TypeScript DTOs.");
    }

    private const string Tab = "    ";

    private static string ToCamelCase(string typeName)
    {
        var chars = typeName.ToCharArray();
        chars[0] = char.ToLowerInvariant(chars[0]);
        return new string(chars);
    }

    private static void GenerateStringEnum(string name, Type type)
    {
        var output = new StringBuilder();
        output.AppendLine(AutoGeneratedMessage);
        output.AppendLine($"export enum {name} {{");

        foreach (var field in type.GetFields(BindingFlags.Static | BindingFlags.Public))
        {
            output.AppendLine(Tab + $"{field.Name} = '{field.GetRawConstantValue()}',");
        }

        output.AppendLine("}");

        var outputPath = Path.Combine(ModelsGeneratedPath, $"{name}.ts");
        WriteFile(outputPath, output);
    }

    private static void GenerateFieldLengths()
    {
        var output = new StringBuilder();
        output.AppendLine(AutoGeneratedMessage);
        output.AppendLine("export const fieldLengths = {");

        var nestedTypes = typeof(FieldLengths).GetNestedTypes();

        foreach (var nestedType in nestedTypes)
        {
            output.AppendLine(Tab + ToCamelCase(nestedType.Name) + ": {");

            foreach (var field in nestedType.GetFields())
            {
                var fieldName = ToCamelCase(field.Name);
                output.AppendLine(Tab + Tab + $"{fieldName}: {field.GetRawConstantValue()},");
            }

            output.AppendLine(Tab + "},");
        }

        output.AppendLine("}");

        var outputPath = Path.Combine(ModelsGeneratedPath, "FieldLengths.ts");
        WriteFile(outputPath, output);
    }

    public static void Main()
    {
        try
        {
            if (!Directory.Exists(ModelsGeneratedPath))
                Directory.CreateDirectory(ModelsGeneratedPath);

            GenerateModels();
            GenerateFieldLengths();
            GenerateStringEnum("PermissionName", typeof(PermissionNames));

            TypeScriptDtoGenerator.GenerateIndex(ModelsGeneratedPath);
            Console.WriteLine("Generated TypeScript DTO index.");
        }
        catch (Exception e)
        {
            Console.WriteLine("GenerateTypeScript failed with error: " + e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }
}
